#!/usr/bin/env bash
## Package manager
declare pkgmngr=''


##
# Setup Usage
##
function setupUsage () {
	echo "Sets up dotbless and installs all of its dependencies. This should only be ran once. Use 'update' to update dotbless."
}

##
# Setup Completions
##
function setupCompletions () {
	echo "--manager"
}


##
# Setup Initializer
##
function setupInit () {
	## local variables
	local manager managers requirements RET out

	## possible package managers
	declare -a managers=("brew" "yum" "apt-get" "ports")

	echo "Determining package manager..";
	## loop and attempt to verify that
	## the command exists
	for manager in ${managers[@]}; do
		if hasCommand "$manager"; then
			pkgmngr=$manager
		fi
	done

	## maybe an override was provided?
	manager="$(flagValue "manager")"

	## if there was a manager then lets
	## override the the pkgmngr setting
	if [ "$manager" ]; then
		pkgmngr="$manager"
	fi

	## if we couldn't determine a package manager
	## then we need to exit now..
	if [[ -z $pkgmngr ]]; then
		echo "Couldn't determine a supporter package manager."
		echo "Please provide one via the --manager flag."
		exit 1;
	elif ! command -v $pkgmngr >/dev/null 2>&1; then
		echo "Command for ${pkgmngr} does not exist.";
		echo "Please provide a valid package manger via the --manager flag";
		exit 1;
	else
		echo "Using ${pkgmngr} as a package manager.";
	fi

	## load requirments
	declare -a requirements="$(getRequirements)";

	echo "Installing system requirements..";
	## loop and install each
	for requirement in ${requirements[@]}; do
		if ! hasCommand "$requirement"; then
			echo
			echo "$pkgmngr[$requirement] :: installing.."

			## execute install via package manager
			out=$(
				$pkgmngr install $requirement
			) || true; ## force true value to continue on
			
			## capture return code
			RET=$?
			if [[ $RET ]]; then
				echo "$requirement failed to install"
				echo
			fi
		fi
	done

	echo "Installing node modules.."
	## install node modules
	$(
		cd ~/.bless;
		npm install . >/dev/null 2>&1;
	)

	echo "Running setup scripts.."
	for script in $BLESS_DIR/lib/scripts/setup/*; do
		exec $script
	done
	
	## let the user know it went well
	echo "Looks like everything went well! =)";
	
	## exit code 0
	exit 0;
}