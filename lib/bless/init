#!/usr/bin/env bash
export declare BLESS_BIN_NAME="dotbless"

set -e


##
# Utils
##
require "bless/utils"


##
# Completion
##
require "completion"

##
# Flag
##
require "flags"


##
# Bless command usage
##
function BlessUsage () {
	local name="dotbless"
	declare -a local commands=( $(BlessListCommands) )
	declare -a flags=("--version,-v" "--help,-h" "--pretty")
	Usage $name commands[@] flags[@]
}


##
# Lists all Bless commands
##
function BlessListCommands () {
	CompletionList all
}


##
# Bless command invocation
##
function BlessCommand () {
	local RET lib args commands excluded
	declare local command=$1
	declare -a local parts=( $(commandFromPath "$command") )
	declare local tail="${parts[ $(expr ${#parts[@]} - 1) ]}"
	
	if ! [[ -z "$BLESS_ARGS" ]]; then
		if [ ${BLESS_ARGS[0]:0:1} != "-" ] &&
			 [[ ${BLESS_ARGS[0]:0:1} =~ "^[0-9]+$" ]] &&
			 [ ${BLESS_ARGS[0]:0:1} != "<" ] &&
			 [ ${BLESS_ARGS[0]:0:1} != ">" ]; 
			then unset ${BLESS_ARGS[0]};
		fi
	fi

	#echo "c" $command
	declare -a args=(${BLESS_ARGS[@]})
	require "$command"
	RET=$?
	i=1

	if [[ $RET ]]; then
		tail=$(lastCommand args[@])
		declare local	oldTail=$tail

		if [ "$tail" != "$command" ]; then
			## loop until we find a proper require of a command
			while ! require "${command}/${tail}" false; do
				i=$(expr $i + 1)
				tail=$(lastCommand args[@] $i)
			done
		fi 

		if [[ -z "$tail" ]]; then
			tail="$oldTail"
		fi


		if hasFlag "completions"; then

			if [ "$tail" = "$command" ]; then
				# Grab the all of the commands
				declare -a commands=( `ls $BLESS_DIR/lib/$command` );
			elif test -d "$BLESS_DIR/lib/$tail"; then
				# Grab the all of the commands
				declare -a commands=( `ls $BLESS_DIR/lib/$tail` );
			fi

			# Libs excluded from completion
			declare -a excluded=( $(CompletionExcluded) );

			#echo $tail
			if [[ $(type -t "${tail}Completions") = "function" ]]; then
				commands+=($(${tail}Completions))
			elif [[ $(type -t "${command}Completions") = "function" ]]; then
				commands+=($(${command}Completions))
			fi

			# loop and remove commands that appear in the excluded array
			for lib in ${excluded[@]}; do
				declare -a commands=( ${commands[@]/$lib/} );
			done


			## output completions
			echo ${commands[@]};
			exit 0;
		fi

		
		#echo $tail
		if hasFlag "usage"; then

			if [[ $(type -t "${tail}Usage") = "function" ]]; then
				## call it!
				${tail}Usage;
				## exit afer we display it
				exit 0
			fi
		elif [[ $(type -t "${tail}Init") = "function" ]]; then
			## call it!
			${tail}Init;

			exit 0
		elif [[ $(type -t "${command}Init") = "function" ]]; then
			## call it!
			${command}Init;

			exit 0
		fi

		echo $(invalidCommand "$command $tail")
		exit 1
	else
		echo $(invalidCommand "$command $tail")
		exit 1
	fi

	exit 0
}