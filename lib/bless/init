#!/usr/bin/env bash
export declare BLESS_BIN_NAME="dotbless"

set -e


##
# Utils
##
require "bless/utils"


##
# Completion
##
require "completion"

##
# Flag
##
require "flags"


##
# Bless command usage
##
function BlessUsage () {
	local name="dotbless"
	declare -a local commands=( $(BlessListCommands) )
	declare -a flags=("--version,-v" "--help,-h" "--pretty")
	Usage $name commands[@] flags[@]
}


##
# Lists all Bless commands
##
function BlessListCommands () {
	CompletionList all
	#echo $(moduleCommands)
}


##
# Bless command invocation
##
function BlessCommand () {
	local RET lib args commands excluded
	declare local command=$1
	declare -a local parts=( $(commandFromPath "$command") )
	declare local tail="${parts[ $(expr ${#parts[@]} - 1) ]}"
	
	if ! [[ -z "$BLESS_ARGS" ]]; then
		if [ ${BLESS_ARGS[0]:0:1} != "-" ] &&
			 [[ ${BLESS_ARGS[0]:0:1} =~ "^[0-9]+$" ]] &&
			 [ ${BLESS_ARGS[0]:0:1} != "<" ] &&
			 [ ${BLESS_ARGS[0]:0:1} != ">" ]; 
			then unset ${BLESS_ARGS[0]};
		fi
	fi

	#echo "c" $command
	declare -a args=(${BLESS_ARGS[@]})
	require "$command"
	RET=$?
	i=1

	if [[ "$command" = *"/"* ]]; then
		declare -a local parts=( $(strsplit $command "/") )
		command="${parts[ $(expr ${#parts[@]} - 1) ]}"
	fi



	if [[ $RET ]]; then
		tail=$(lastCommand args[@])
		declare local	oldTail=$tail

		if [ "$tail" != "$command" ]; then
			## loop until we find a proper require of a command
			while ! require "${command}/${tail}" false; do
				i=$(expr $i + 1)
				tail=$(lastCommand args[@] $i)
			done
		fi 

		if [[ -z "$tail" ]]; then
			tail="$oldTail"
		fi

		##
		# Exports
		##
		export -f load
		export -f die
		export -f fatal
		export -f getArgs
		export -f isNull
		export -f Usage


		if hasFlag "completions"; then
			if isModule $tail || isModule $command; then
				declare local __dirname="$BLESS_DIR/bless_modules/$command"
				if isModule $tail; then
					command="$tail"
				fi
			else
				if [ "$tail" = "$command" ]; then
					if test -d "$BLESS_DIR/lib/$command"; then
						# Grab the all of the commands
						declare -a commands=( `ls $BLESS_DIR/lib/$command` );
					else
						declare -a commands=()
					fi
				elif test -d "$BLESS_DIR/lib/$tail"; then
					# Grab the all of the commands
					declare -a commands=( `ls $BLESS_DIR/lib/$tail` );
				fi

				# Libs excluded from completion
				declare -a excluded=( $(CompletionExcluded) );

				#echo $tail
				if [[ $(type -t "${tail}Completions") = "function" ]]; then
					commands+=($(${tail}Completions))
				elif [[ $(type -t "${command}Completions") = "function" ]]; then
					commands+=($(${command}Completions))
				fi

				# loop and remove commands that appear in the excluded array
				for lib in ${excluded[@]}; do
					declare -a commands=( ${commands[@]/$lib/} );
				done


				## output completions
				echo ${commands[@]};
				exit 0;
			fi
		fi

		
		#echo $tail
		if hasFlag "usage"; then

			if [[ $(type -t "${tail}Usage") = "function" ]]; then
				## call it!
				${tail}Usage;
				## exit afer we display it
				exit 0
			else
				declare local __dirname="$BLESS_DIR/bless_modules/$command"
				if isModule "$tail"; then
					declare local conf=$(resolveConf $tail "bless_modules")
					if ! isNull "$conf"; then
						bless.IniParser $conf
						if [[ $(type -t bless.section.package) = "function" ]]; then
							bless.section.package
							echo $usage
						fi
					fi
				elif isModule "$command"; then
					declare local conf=$(resolveConf $tail "bless_modules")
					if ! isNull "$conf"; then
						bless.IniParser $conf
						if [[ $(type -t bless.section.package) = "function" ]]; then
							bless.section.package
							echo $usage
						fi
					fi
				fi

				exit
			fi
		elif [[ $(type -t "${tail}Init") = "function" ]]; then
			## call it!
			${tail}Init;

			exit 0
		elif [[ $(type -t "${command}Init") = "function" ]]; then
			## call it!
			${command}Init;

			exit 0
		fi


		if isModule $tail; then
			command="$tail";
		fi

		if isModule "$command"; then
			declare local conf=$(resolveConf $command "bless_modules")
			bless.IniParser $conf
			if [[ $(type -t bless.section.main) = "function" ]]; then
				
				## END Exports
				declare -a local args=$(getArgs $command)
				declare local __dirname="$BLESS_DIR/bless_modules/$command"
				bless.section.main
				if ! isNull "${args[@]}"; then
					if test -f "$main"; then
						 runcommand "$main"
					fi
				else
					bless.section.package
					bless.section.main
					if ! isNull "$help"; then
						if test -f "$help"; then
							runcommand $help
						else
							echo "$help"
						fi
					fi
				fi
				
			else
				echo "Nothing to be done for command '$command'"
			fi
			exit
		fi
		echo $(invalidCommand "$command $tail")
		exit 1
	fi

	exit 0
}